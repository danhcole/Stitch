/*
   This file will contain samples of Stitch syntax
   and loop construction.
*/

int main() {

    //new addition
    foreach ... in ... {

    }

    The for each..in.. keyword set will denote a special type
    of for loop. Similar to a foreach loop in Java, this loop
    will iterate through the item and apply what's in the closure.

    //potential array syntax; not finalized
    int array a = 1,2,3,4,5;

    foreach i in a do {
        i = i + 2;
    }
    //the code above would add two to every element in the array
    //i here is an instance variable that will be used inside the 
    //for loop, which will hold the value of the array cell at that
    //specific iteration
    
    /* is 'item' typed, what if the array contains pointers, do we allow only certain arrays? When do we check?*/

    foreach item in a {
        item = item + 7;
    }
    //the name in between each and in can change

    //This structure will also have two associated keywords: row and
    //column. These keywords can be used to iterate through the rows
    //and the columns of a multidimensional array
    //for example:

    foreach row in a {

        foreach column in a {

            //need a syntactic way to access individual pieces
            //haven't gotten that far yet
        }
    }

   /* I like the idea of row/column, would it work something like... */
   int array a =  {<1, 2, 3>
                   <4, 5, 6>
                   <7, 8, 9>};
                   
   a.column[0];               // [1, 4, 7]
   a.row[1];                  //[1, 2, 3]
   a.row[2].column[2];        //9
   a.column[0] * a.row[0];    //30
   
   /* not sure about the matrix def. syntax, may get complex; also how do you do n-dimentional arrays? */
   

    //one last thing...
    int array r; //is a row
    int array c; is a "column";

    int dot = r * c; //if we make arrays primitive, * can be defined as the
                     //DOT product of the arrays  /* love this - Dan */
